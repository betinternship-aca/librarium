"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var fs_1 = require("fs");
var path_1 = require("path");
var _1 = require("./common/");
var order_1 = require("./order");
var author_1 = require("./author");
var category_1 = require("./category");
var filePath = path_1.join(__dirname, './data/books.db.json');
var Book = (function () {
    // countOfDownloads: number;
    function Book(data) {
        this.bookId = _1.createGUID();
        Object.assign(this, data);
        this.authors = this.authorIds.map(function (authorId) { return author_1.Author.getAuthor(authorId); });
        this.categories = this.categoryIds.map(function (categoryId) { return category_1.Category.getCategory(categoryId); });
    }
    Book.getAllBooks = function () {
        return JSON.parse(fs_1.readFileSync(filePath).toString()).map(function (data) { return new Book(data); });
    };
    Book.getBook = function (id) {
        return this.getAllBooks().find(function (b) { return b.bookId === id; });
    };
    Book.createBook = function (data) {
        var book = new Book(data);
        var books = this.getAllBooks();
        books.push(book);
        this.saveAllBooks(books);
        return book;
    };
    Book.updateBook = function (data) {
        var books = this.getAllBooks();
        var bookIndex = books.findIndex(function (b) { return b.bookId === data.id; });
        books.splice(bookIndex, 1, data);
        this.saveAllBooks(books);
        return data;
    };
    Book.deleteBook = function (id) {
        var books = this.getAllBooks();
        var bookIndex = books.findIndex(function (b) { return b.bookId === id; });
        books.splice(bookIndex, 1);
        this.saveAllBooks(books);
    };
    Book.saveAllBooks = function (bookList) {
        fs_1.writeFileSync(filePath, JSON.stringify(bookList, null, 2));
    };
    return Book;
}());
exports.Book = Book;
exports.BookRouter = express.Router();
exports.BookRouter.get('/book-list', function (req, res) {
    res.json(Book.getAllBooks());
});
exports.BookRouter.post('/:countryId', function (req, res) {
    res.json(Book.getBook(req.params.id));
});
// create book
exports.BookRouter.post('/', function (req, res) {
    res.json(Book.createBook(req.body));
});
// update book
exports.BookRouter.post('/:countryId', function (req, res) {
    var data = req.body;
    data.id = req.params.id;
    res.json(Book.updateBook(data));
});
// delete book
exports.BookRouter.delete('/:countryId', function (req, res) {
    var id = req.params.id;
    res.json(Book.deleteBook(id));
});
exports.BookRouter.get('/:id/orders', function (req, res) {
    res.json(order_1.Order.getBookOrders(req.params.id));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvaG9zcG9naC9EZXNrdG9wL2JldFByb2plY3RMaWJyYXJpdW0vbGlicmFyaXVtL3NyYy9zZXJ2ZXItYXBpL2Jvb2sudHMiLCJzb3VyY2VzIjpbIi9ob21lL2hvc3BvZ2gvRGVza3RvcC9iZXRQcm9qZWN0TGlicmFyaXVtL2xpYnJhcml1bS9zcmMvc2VydmVyLWFwaS9ib29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQW1DO0FBQ25DLHlCQUErQztBQUMvQyw2QkFBMEI7QUFDMUIsOEJBQXFDO0FBQ3JDLGlDQUE4QjtBQUU5QixtQ0FBZ0M7QUFHaEMsdUNBQW9DO0FBR3BDLElBQU0sUUFBUSxHQUFHLFdBQUksQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUV6RDtJQVlFLDRCQUE0QjtJQUU1QixjQUFZLElBQUk7UUFiaEIsV0FBTSxHQUFXLGFBQVUsRUFBRSxDQUFDO1FBYzVCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxlQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFVBQVUsSUFBSSxPQUFBLG1CQUFRLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVNLGdCQUFXLEdBQWxCO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFk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Q0FBQyxJQUFJLENBQUM7SUFDdEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUMsQ0FBQztBQUVILGNBQWM7QUFDZCxrQkFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRztJQUN4QyxJQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUN6QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoQyxDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFVLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxVQUFDLEdBQUcsRUFBRSxHQUFHO0lBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0MsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHtyZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmN9IGZyb20gJ2ZzJztcbmltcG9ydCB7am9pbn0gZnJvbSAncGF0aCc7XG5pbXBvcnQge2NyZWF0ZUdVSUR9IGZyb20gJy4vY29tbW9uLyc7XG5pbXBvcnQge09yZGVyfSBmcm9tICcuL29yZGVyJztcbmltcG9ydCB7SUJvb2t9IGZyb20gJy4uL2FwcC9kZWZpbmVzL0lCb29rJztcbmltcG9ydCB7QXV0aG9yfSBmcm9tICcuL2F1dGhvcic7XG5pbXBvcnQge0lBdXRob3J9IGZyb20gJy4uL2FwcC9kZWZpbmVzL0lBdXRob3InO1xuaW1wb3J0IHtJQ2F0ZWdvcnl9IGZyb20gJy4uL2FwcC9kZWZpbmVzL0lDYXRlZ29yeSc7XG5pbXBvcnQge0NhdGVnb3J5fSBmcm9tICcuL2NhdGVnb3J5JztcblxuXG5jb25zdCBmaWxlUGF0aCA9IGpvaW4oX19kaXJuYW1lLCAnLi9kYXRhL2Jvb2tzLmRiLmpzb24nKTtcblxuZXhwb3J0IGNsYXNzIEJvb2sgaW1wbGVtZW50cyBJQm9vayB7XG4gIGJvb2tJZDogc3RyaW5nID0gY3JlYXRlR1VJRCgpO1xuICBpbWFnZTogc3RyaW5nOyAvLyB1cmwgeWV0XG4gIGJvb2tOYW1lOiBzdHJpbmc7XG4gIGF1dGhvcklkczogc3RyaW5nW107XG4gIGF1dGhvcnM6IElBdXRob3JbXTtcbiAgY2F0ZWdvcnlJZHM6IHN0cmluZ1tdO1xuICBjYXRlZ29yaWVzOiBJQ2F0ZWdvcnlbXTtcbiAgZWRpdGlvblllYXI6IERhdGU7XG4gIGxhbmd1YWdlPzogc3RyaW5nO1xuICBwcmljZT86IG51bWJlcjtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgLy8gY291bnRPZkRvd25sb2FkczogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGRhdGEpO1xuICAgIHRoaXMuYXV0aG9ycyA9IHRoaXMuYXV0aG9ySWRzLm1hcChhdXRob3JJZCA9PiBBdXRob3IuZ2V0QXV0aG9yKGF1dGhvcklkKSk7XG4gICAgdGhpcy5jYXRlZ29yaWVzID0gdGhpcy5jYXRlZ29yeUlkcy5tYXAoY2F0ZWdvcnlJZCA9PiBDYXRlZ29yeS5nZXRDYXRlZ29yeShjYXRlZ29yeUlkKSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0QWxsQm9va3MoKTogQm9va1tdIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMoZmlsZVBhdGgpLnRvU3RyaW5nKCkpLm1hcChkYXRhID0+IG5ldyBCb29rKGRhdGEpKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRCb29rKGlkOiBzdHJpbmcpOiBCb29rIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBbGxCb29rcygpLmZpbmQoYiA9PiBiLmJvb2tJZCA9PT0gaWQpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUJvb2soZGF0YSkge1xuICAgIGNvbnN0IGJvb2sgPSBuZXcgQm9vayhkYXRhKTtcbiAgICBjb25zdCBib29rcyA9IHRoaXMuZ2V0QWxsQm9va3MoKTtcbiAgICBib29rcy5wdXNoKGJvb2spO1xuICAgIHRoaXMuc2F2ZUFsbEJvb2tzKGJvb2tzKTtcbiAgICByZXR1cm4gYm9vaztcbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGVCb29rKGRhdGEpIHtcbiAgICBjb25zdCBib29rcyA9IHRoaXMuZ2V0QWxsQm9va3MoKTtcbiAgICBjb25zdCBib29rSW5kZXggPSBib29rcy5maW5kSW5kZXgoYiA9PiBiLmJvb2tJZCA9PT0gZGF0YS5pZCk7XG4gICAgYm9va3Muc3BsaWNlKGJvb2tJbmRleCwgMSwgZGF0YSk7XG4gICAgdGhpcy5zYXZlQWxsQm9va3MoYm9va3MpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgc3RhdGljIGRlbGV0ZUJvb2soaWQpIHtcbiAgICBjb25zdCBib29rcyA9IHRoaXMuZ2V0QWxsQm9va3MoKTtcbiAgICBjb25zdCBib29rSW5kZXggPSBib29rcy5maW5kSW5kZXgoYiA9PiBiLmJvb2tJZCA9PT0gaWQpO1xuICAgIGJvb2tzLnNwbGljZShib29rSW5kZXgsIDEpO1xuICAgIHRoaXMuc2F2ZUFsbEJvb2tzKGJvb2tzKTtcbiAgfVxuXG4gIHN0YXRpYyBzYXZlQWxsQm9va3MoYm9va0xpc3QpIHtcbiAgICB3cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBKU09OLnN0cmluZ2lmeShib29rTGlzdCwgbnVsbCwgMikpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBCb29rUm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuQm9va1JvdXRlci5nZXQoJy9ib29rLWxpc3QnLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oQm9vay5nZXRBbGxCb29rcygpKTtcbn0pO1xuXG5Cb29rUm91dGVyLnBvc3QoJy86Y291bnRyeUlkJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5qc29uKEJvb2suZ2V0Qm9vayhyZXEucGFyYW1zLmlkKSk7XG59KTtcblxuLy8gY3JlYXRlIGJvb2tcbkJvb2tSb3V0ZXIucG9zdCgnLycsIChyZXEsIHJlcykgPT4ge1xuICByZXMuanNvbihCb29rLmNyZWF0ZUJvb2socmVxLmJvZHkpKTtcbn0pO1xuXG4vLyB1cGRhdGUgYm9va1xuQm9va1JvdXRlci5wb3N0KCcvOmNvdW50cnlJZCcsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBkYXRhID0gcmVxLmJvZHk7XG4gIGRhdGEuaWQgPSByZXEucGFyYW1zLmlkO1xuICByZXMuanNvbihCb29rLnVwZGF0ZUJvb2soZGF0YSkpO1xufSk7XG5cbi8vIGRlbGV0ZSBib29rXG5Cb29rUm91dGVyLmRlbGV0ZSgnLzpjb3VudHJ5SWQnLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkO1xuICByZXMuanNvbihCb29rLmRlbGV0ZUJvb2soaWQpKTtcbn0pO1xuXG5Cb29rUm91dGVyLmdldCgnLzppZC9vcmRlcnMnLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oT3JkZXIuZ2V0Qm9va09yZGVycyhyZXEucGFyYW1zLmlkKSk7XG59KTtcbiJdfQ==