"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var fs_1 = require("fs");
var path_1 = require("path");
var _1 = require("./common/");
var filePath = path_1.join(__dirname, './data/books.db.json');
var Book = (function () {
    // countOfDownloads: number;
    function Book(data) {
        this.bookId = _1.createGUID();
        Object.assign(this, data);
    }
    Book.getAllBooks = function () {
        return JSON.parse(fs_1.readFileSync(filePath).toString());
    };
    Book.getBook = function (id) {
        return this.getAllBooks().find(function (b) { return b.bookId === id; });
    };
    Book.createBook = function (data) {
        var book = new Book(data);
        var books = this.getAllBooks();
        books.push(book);
        this.saveAllBooks(books);
        return book;
    };
    Book.updateBook = function (data) {
        var books = this.getAllBooks();
        var bookIndex = books.findIndex(function (b) { return b.bookId === data.id; });
        books.splice(bookIndex, 1, data);
        this.saveAllBooks(books);
        return data;
    };
    Book.deleteBook = function (id) {
        var books = this.getAllBooks();
        var bookIndex = books.findIndex(function (b) { return b.bookId === id; });
        books.splice(bookIndex, 1);
        this.saveAllBooks(books);
    };
    Book.saveAllBooks = function (bookList) {
        fs_1.writeFileSync(filePath, JSON.stringify(bookList, null, 2));
    };
    return Book;
}());
exports.Book = Book;
exports.BookRouter = express.Router();
exports.BookRouter.get('/book-list', function (req, res) {
    res.json(Book.getAllBooks());
});
exports.BookRouter.post('/:countryId', function (req, res) {
    res.json(Book.getBook(req.params.id));
});
// create book
exports.BookRouter.post('/', function (req, res) {
    res.json(Book.createBook(req.body));
});
// update book
exports.BookRouter.post('/:countryId', function (req, res) {
    var data = req.body;
    data.id = req.params.id;
    res.json(Book.updateBook(data));
});
// delete book
exports.BookRouter.delete('/:countryId', function (req, res) {
    var id = req.params.id;
    res.json(Book.deleteBook(id));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvaG9zcG9naC9EZXNrdG9wL2JldFByb2plY3RMaWJyYXJpdW0vbGlicmFyaXVtL3NyYy9zZXJ2ZXItYXBpL2Jvb2sudHMiLCJzb3VyY2VzIjpbIi9ob21lL2hvc3BvZ2gvRGVza3RvcC9iZXRQcm9qZWN0TGlicmFyaXVtL2xpYnJhcml1bS9zcmMvc2VydmVyLWFwaS9ib29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQW1DO0FBQ25DLHlCQUErQztBQUMvQyw2QkFBMEI7QUFDMUIsOEJBQXFDO0FBR3JDLElBQU0sUUFBUSxHQUFHLFdBQUksQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUV6RDtJQU9FLDRCQUE0QjtJQUU1QixjQUFZLElBQUk7UUFSaEIsV0FBTSxHQUFXLGFBQVUsRUFBRSxDQUFDO1FBUzVCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxnQkFBVyxHQUFsQjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sWUFBTyxHQUFkLFVBQWUsRUFBVTtRQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFmLENBQWUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxlQUFVLEdBQWpCLFVBQWtCLElBQUk7UUFDcEIsSUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxL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Q29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHtyZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmN9IGZyb20gJ2ZzJztcbmltcG9ydCB7am9pbn0gZnJvbSAncGF0aCc7XG5pbXBvcnQge2NyZWF0ZUdVSUR9IGZyb20gJy4vY29tbW9uLyc7XG5cblxuY29uc3QgZmlsZVBhdGggPSBqb2luKF9fZGlybmFtZSwgJy4vZGF0YS9ib29rcy5kYi5qc29uJyk7XG5cbmV4cG9ydCBjbGFzcyBCb29rIHtcbiAgYm9va0lkOiBzdHJpbmcgPSBjcmVhdGVHVUlEKCk7XG4gIGJvb2tOYW1lOiBzdHJpbmc7XG4gIGF1dGhvck5hbWU6IHN0cmluZzsgLy8gOiBBdXRob3JcbiAgY2F0ZWdvcnlJZHM6IHN0cmluZztcbiAgZWRpdGlvblllYXI6IERhdGU7XG4gIGxhbmd1YWdlPzogc3RyaW5nO1xuICAvLyBjb3VudE9mRG93bmxvYWRzOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGF0YSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0QWxsQm9va3MoKTogQm9va1tdIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMoZmlsZVBhdGgpLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgc3RhdGljIGdldEJvb2soaWQ6IHN0cmluZyk6IEJvb2sge1xuICAgIHJldHVybiB0aGlzLmdldEFsbEJvb2tzKCkuZmluZChiID0+IGIuYm9va0lkID09PSBpZCk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlQm9vayhkYXRhKSB7XG4gICAgY29uc3QgYm9vayA9IG5ldyBCb29rKGRhdGEpO1xuICAgIGNvbnN0IGJvb2tzID0gdGhpcy5nZXRBbGxCb29rcygpO1xuICAgIGJvb2tzLnB1c2goYm9vayk7XG4gICAgdGhpcy5zYXZlQWxsQm9va3MoYm9va3MpO1xuICAgIHJldHVybiBib29rO1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUJvb2soZGF0YSkge1xuICAgIGNvbnN0IGJvb2tzID0gdGhpcy5nZXRBbGxCb29rcygpO1xuICAgIGNvbnN0IGJvb2tJbmRleCA9IGJvb2tzLmZpbmRJbmRleChiID0+IGIuYm9va0lkID09PSBkYXRhLmlkKTtcbiAgICBib29rcy5zcGxpY2UoYm9va0luZGV4LCAxLCBkYXRhKTtcbiAgICB0aGlzLnNhdmVBbGxCb29rcyhib29rcyk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBzdGF0aWMgZGVsZXRlQm9vayhpZCkge1xuICAgIGNvbnN0IGJvb2tzID0gdGhpcy5nZXRBbGxCb29rcygpO1xuICAgIGNvbnN0IGJvb2tJbmRleCA9IGJvb2tzLmZpbmRJbmRleChiID0+IGIuYm9va0lkID09PSBpZCk7XG4gICAgYm9va3Muc3BsaWNlKGJvb2tJbmRleCwgMSk7XG4gICAgdGhpcy5zYXZlQWxsQm9va3MoYm9va3MpO1xuICB9XG5cbiAgc3RhdGljIHNhdmVBbGxCb29rcyhib29rTGlzdCkge1xuICAgIHdyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIEpTT04uc3RyaW5naWZ5KGJvb2tMaXN0LCBudWxsLCAyKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEJvb2tSb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG5Cb29rUm91dGVyLmdldCgnL2Jvb2stbGlzdCcsIChyZXEsIHJlcykgPT4ge1xuICByZXMuanNvbihCb29rLmdldEFsbEJvb2tzKCkpO1xufSk7XG5cbkJvb2tSb3V0ZXIucG9zdCgnLzpjb3VudHJ5SWQnLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oQm9vay5nZXRCb29rKHJlcS5wYXJhbXMuaWQpKTtcbn0pO1xuXG4vLyBjcmVhdGUgYm9va1xuQm9va1JvdXRlci5wb3N0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5qc29uKEJvb2suY3JlYXRlQm9vayhyZXEuYm9keSkpO1xufSk7XG5cbi8vIHVwZGF0ZSBib29rXG5Cb29rUm91dGVyLnBvc3QoJy86Y291bnRyeUlkJywgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSByZXEuYm9keTtcbiAgZGF0YS5pZCA9IHJlcS5wYXJhbXMuaWQ7XG4gIHJlcy5qc29uKEJvb2sudXBkYXRlQm9vayhkYXRhKSk7XG59KTtcblxuLy8gZGVsZXRlIGJvb2tcbkJvb2tSb3V0ZXIuZGVsZXRlKCcvOmNvdW50cnlJZCcsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBpZCA9IHJlcS5wYXJhbXMuaWQ7XG4gIHJlcy5qc29uKEJvb2suZGVsZXRlQm9vayhpZCkpO1xufSk7XG4iXX0=