"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var fs_1 = require("fs");
var path_1 = require("path");
var _1 = require("./common/");
var filePath = path_1.join(__dirname, './data/libraries.db.json');
var Library = (function () {
    function Library(data) {
        this.libraryId = _1.createGUID();
        // copies every property of data to this
        Object.assign(this, data);
    }
    Library.getAllLibraries = function () {
        return JSON.parse(fs_1.readFileSync(filePath).toString());
    };
    Library.getLibrary = function (id) {
        return this.getAllLibraries().find(function (l) { return l.libraryId === id; });
    };
    Library.createLibrary = function (data) {
        var library = new Library(data);
        var libs = this.getAllLibraries();
        libs.push(library);
        this.saveAllLibraries(libs);
        return library;
    };
    Library.updateLibrary = function (data) {
        var libs = this.getAllLibraries();
        var libIndex = libs.findIndex(function (l) { return l.libraryId === data.id; });
        libs.splice(libIndex, 1, data);
        this.saveAllLibraries(libs);
        return data;
    };
    Library.deleteLibrary = function (id) {
        var libs = this.getAllLibraries();
        var libIndex = libs.findIndex(function (l) { return l.libraryId === id; });
        libs.splice(libIndex, 1);
        this.saveAllLibraries(libs);
    };
    Library.saveAllLibraries = function (libraryList) {
        fs_1.writeFileSync(filePath, JSON.stringify(libraryList, null, 2));
    };
    return Library;
}());
exports.Library = Library;
exports.LibraryRouter = express.Router();
exports.LibraryRouter.get('/library-list', function (req, res) {
    res.json(Library.getAllLibraries());
});
exports.LibraryRouter.get('/:countryId', function (req, res) {
    res.json(Library.getLibrary(req.params.id));
});
// create library
exports.LibraryRouter.post('/', function (req, res) {
    res.json(Library.createLibrary(req.body));
});
// update library
exports.LibraryRouter.post('/:countryId', function (req, res) {
    var data = req.body;
    data.id = req.params.id;
    res.json(Library.updateLibrary(data));
});
// delete library
exports.LibraryRouter.delete('/:countryId', function (req, res) {
    var id = req.params.id;
    res.json(Library.deleteLibrary(id));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvaG9zcG9naC9EZXNrdG9wL2JldFByb2plY3RMaWJyYXJpdW0vbGlicmFyaXVtL3NyYy9zZXJ2ZXItYXBpL2xpYnJhcnkudHMiLCJzb3VyY2VzIjpbIi9ob21lL2hvc3BvZ2gvRGVza3RvcC9iZXRQcm9qZWN0TGlicmFyaXVtL2xpYnJhcml1bS9zcmMvc2VydmVyLWFwaS9saWJyYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQW1DO0FBQ25DLHlCQUErQztBQUMvQyw2QkFBMEI7QUFDMUIsOEJBQThDO0FBRzlDLElBQU0sUUFBUSxHQUFHLFdBQUksQ0FBQyxTQUFTLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztBQUU3RDtJQVNFLGlCQUFZLElBQUk7UUFSaEIsY0FBUyxHQUFXLGFBQVUsRUFBRSxDQUFDO1FBUy9CLHdDQUF3QztRQUN4QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU0sdUJBQWUsR0FBdEI7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVNLGtCQUFVLEdBQWpCLFVBQWtCLEVBQVU7UUFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsU0FBUyxLQUFLLEVBQUUsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxxQkFBYSxHQUFwQixVQUFxQixJQUFJO1FBQ3ZCLElBQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FB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QUFDO0FBQ3RDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCB7cmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jfSBmcm9tICdmcyc7XG5pbXBvcnQge2pvaW59IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtjcmVhdGVHVUlELCBBZGRyZXNzfSBmcm9tICcuL2NvbW1vbi8nO1xuaW1wb3J0IHtDb3VudHJ5fSBmcm9tICcuL2NvdW50cnknO1xuXG5jb25zdCBmaWxlUGF0aCA9IGpvaW4oX19kaXJuYW1lLCAnLi9kYXRhL2xpYnJhcmllcy5kYi5qc29uJyk7XG5cbmV4cG9ydCBjbGFzcyBMaWJyYXJ5IHtcbiAgbGlicmFyeUlkOiBzdHJpbmcgPSBjcmVhdGVHVUlEKCk7XG4gIG5hbWU6IHN0cmluZztcbiAgYWRkcmVzczogQWRkcmVzcztcbiAgYnJhbmNoOiBMaWJyYXJ5IHwgbnVsbDtcbiAgZW1haWw/OiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xuICBjb3VudHJ5OiBDb3VudHJ5O1xuXG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAvLyBjb3BpZXMgZXZlcnkgcHJvcGVydHkgb2YgZGF0YSB0byB0aGlzXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkYXRhKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBbGxMaWJyYXJpZXMoKTogTGlicmFyeVtdIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMoZmlsZVBhdGgpLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgc3RhdGljIGdldExpYnJhcnkoaWQ6IHN0cmluZyk6IExpYnJhcnkge1xuICAgIHJldHVybiB0aGlzLmdldEFsbExpYnJhcmllcygpLmZpbmQobCA9PiBsLmxpYnJhcnlJZCA9PT0gaWQpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUxpYnJhcnkoZGF0YSkge1xuICAgIGNvbnN0IGxpYnJhcnkgPSBuZXcgTGlicmFyeShkYXRhKTtcbiAgICBjb25zdCBsaWJzID0gdGhpcy5nZXRBbGxMaWJyYXJpZXMoKTtcbiAgICBsaWJzLnB1c2gobGlicmFyeSk7XG4gICAgdGhpcy5zYXZlQWxsTGlicmFyaWVzKGxpYnMpO1xuICAgIHJldHVybiBsaWJyYXJ5O1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUxpYnJhcnkoZGF0YSkge1xuICAgIGNvbnN0IGxpYnMgPSB0aGlzLmdldEFsbExpYnJhcmllcygpO1xuICAgIGNvbnN0IGxpYkluZGV4ID0gbGlicy5maW5kSW5kZXgobCA9PiBsLmxpYnJhcnlJZCA9PT0gZGF0YS5pZCk7XG4gICAgbGlicy5zcGxpY2UobGliSW5kZXgsIDEsIGRhdGEpO1xuICAgIHRoaXMuc2F2ZUFsbExpYnJhcmllcyhsaWJzKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVMaWJyYXJ5KGlkKSB7XG4gICAgY29uc3QgbGlicyA9IHRoaXMuZ2V0QWxsTGlicmFyaWVzKCk7XG4gICAgY29uc3QgbGliSW5kZXggPSBsaWJzLmZpbmRJbmRleChsID0+IGwubGlicmFyeUlkPT09IGlkKTtcbiAgICBsaWJzLnNwbGljZShsaWJJbmRleCwgMSk7XG4gICAgdGhpcy5zYXZlQWxsTGlicmFyaWVzKGxpYnMpO1xuICB9XG5cbiAgc3RhdGljIHNhdmVBbGxMaWJyYXJpZXMobGlicmFyeUxpc3QpIHtcbiAgICB3cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBKU09OLnN0cmluZ2lmeShsaWJyYXJ5TGlzdCwgbnVsbCwgMikpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBMaWJyYXJ5Um91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuTGlicmFyeVJvdXRlci5nZXQoJy9saWJyYXJ5LWxpc3QnLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oTGlicmFyeS5nZXRBbGxMaWJyYXJpZXMoKSk7XG59KTtcblxuTGlicmFyeVJvdXRlci5nZXQoJy86Y291bnRyeUlkJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5qc29uKExpYnJhcnkuZ2V0TGlicmFyeShyZXEucGFyYW1zLmlkKSk7XG59KTtcblxuLy8gY3JlYXRlIGxpYnJhcnlcbkxpYnJhcnlSb3V0ZXIucG9zdCgnLycsIChyZXEsIHJlcykgPT4ge1xuICByZXMuanNvbihMaWJyYXJ5LmNyZWF0ZUxpYnJhcnkocmVxLmJvZHkpKTtcbn0pO1xuXG4vLyB1cGRhdGUgbGlicmFyeVxuTGlicmFyeVJvdXRlci5wb3N0KCcvOmNvdW50cnlJZCcsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBkYXRhID0gcmVxLmJvZHk7XG4gIGRhdGEuaWQgPSByZXEucGFyYW1zLmlkO1xuICByZXMuanNvbihMaWJyYXJ5LnVwZGF0ZUxpYnJhcnkoZGF0YSkpO1xufSk7XG5cbi8vIGRlbGV0ZSBsaWJyYXJ5XG5MaWJyYXJ5Um91dGVyLmRlbGV0ZSgnLzpjb3VudHJ5SWQnLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkO1xuICByZXMuanNvbihMaWJyYXJ5LmRlbGV0ZUxpYnJhcnkoaWQpKTtcbn0pO1xuXG5cbiJdfQ==