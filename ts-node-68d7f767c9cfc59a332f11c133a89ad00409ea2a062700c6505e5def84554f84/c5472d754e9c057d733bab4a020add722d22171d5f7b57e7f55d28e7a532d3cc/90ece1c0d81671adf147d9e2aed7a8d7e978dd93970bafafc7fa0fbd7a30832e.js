"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var fs_1 = require("fs");
var path_1 = require("path");
var _1 = require("./common/");
var filePath = path_1.join(__dirname, './data/users.db.json');
var User = (function () {
    function User(data) {
        this.userId = _1.createGUID();
        // copies every property of data to this
        Object.assign(this, data);
    }
    User.getAllUsers = function () {
        return JSON.parse(fs_1.readFileSync(filePath).toString());
    };
    User.getUser = function (id) {
        return this.getAllUsers().find(function (u) { return u.userId === id; });
    };
    User.createUser = function (data) {
        var user = new User(data);
        var users = this.getAllUsers();
        users.push(user);
        this.saveAllUsers(users);
        return user;
    };
    User.updateUser = function (data) {
        var users = this.getAllUsers();
        var userIndex = users.findIndex(function (u) { return u.userId === data.id; });
        users.splice(userIndex, 1, data);
        this.saveAllUsers(users);
        return data;
    };
    User.deleteUser = function (id) {
        var users = this.getAllUsers();
        var userIndex = users.findIndex(function (u) { return u.userId === id; });
        users.splice(userIndex, 1);
        this.saveAllUsers(users);
    };
    User.saveAllUsers = function (userList) {
        fs_1.writeFileSync(filePath, JSON.stringify(userList, null, 2));
    };
    return User;
}());
exports.User = User;
exports.UserRouter = express.Router();
exports.UserRouter.get('/user-list', function (req, res) {
    res.json(User.getAllUsers());
});
exports.UserRouter.get('/:countryId', function (req, res) {
    res.json(User.getUser(req.params.id));
});
// create user
exports.UserRouter.post('/', function (req, res) {
    res.json(User.createUser(req.body));
});
// update user
exports.UserRouter.post('/:countryId', function (req, res) {
    var data = req.body;
    data.id = req.params.id;
    res.json(User.updateUser(data));
});
// delete user
exports.UserRouter.delete('/:countryId', function (req, res) {
    var id = req.params.id;
    res.json(User.deleteUser(id));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvaG9zcG9naC9EZXNrdG9wL2JldFByb2plY3RMaWJyYXJpdW0vbGlicmFyaXVtL3NyYy9zZXJ2ZXItYXBpL3VzZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL2hvc3BvZ2gvRGVza3RvcC9iZXRQcm9qZWN0TGlicmFyaXVtL2xpYnJhcml1bS9zcmMvc2VydmVyLWFwaS91c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQW1DO0FBQ25DLHlCQUErQztBQUMvQyw2QkFBMEI7QUFDMUIsOEJBQXFDO0FBRXJDLElBQU0sUUFBUSxHQUFHLFdBQUksQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUV6RDtJQVVFLGNBQVksSUFBSTtRQVRoQixXQUFNLEdBQVcsYUFBVSxFQUFFLENBQUM7UUFVNUIsd0NBQXdDO1FBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxnQkFBVyxHQUFsQjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sWUFBTyxHQUFkLFVBQWUsRUFBVTtRQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFmLENBQWUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxlQUFVLEdBQWpCLFVBQWtCLElBQUk7UUFDcEIsSUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxL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Q29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHtyZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmN9IGZyb20gJ2ZzJztcbmltcG9ydCB7am9pbn0gZnJvbSAncGF0aCc7XG5pbXBvcnQge2NyZWF0ZUdVSUR9IGZyb20gJy4vY29tbW9uLyc7XG5cbmNvbnN0IGZpbGVQYXRoID0gam9pbihfX2Rpcm5hbWUsICcuL2RhdGEvdXNlcnMuZGIuanNvbicpO1xuXG5leHBvcnQgY2xhc3MgVXNlciB7XG4gIHVzZXJJZDogc3RyaW5nID0gY3JlYXRlR1VJRCgpO1xuICBsb2dpbjogc3RyaW5nO1xuICBwYXNzd29yZDogc3RyaW5nO1xuICBmaXJzdE5hbWU6IHN0cmluZztcbiAgbGFzdE5hbWU6IHN0cmluZztcbiAgZ2VuZGVyOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAvLyBjb3BpZXMgZXZlcnkgcHJvcGVydHkgb2YgZGF0YSB0byB0aGlzXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkYXRhKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBbGxVc2VycygpOiBVc2VyW10ge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhmaWxlUGF0aCkudG9TdHJpbmcoKSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0VXNlcihpZDogc3RyaW5nKTogVXNlciB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWxsVXNlcnMoKS5maW5kKHUgPT4gdS51c2VySWQgPT09IGlkKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVVc2VyKGRhdGEpIHtcbiAgICBjb25zdCB1c2VyID0gbmV3IFVzZXIoZGF0YSk7XG4gICAgY29uc3QgdXNlcnMgPSB0aGlzLmdldEFsbFVzZXJzKCk7XG4gICAgdXNlcnMucHVzaCh1c2VyKTtcbiAgICB0aGlzLnNhdmVBbGxVc2Vycyh1c2Vycyk7XG4gICAgcmV0dXJuIHVzZXI7XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlVXNlcihkYXRhKSB7XG4gICAgY29uc3QgdXNlcnMgPSB0aGlzLmdldEFsbFVzZXJzKCk7XG4gICAgY29uc3QgdXNlckluZGV4ID0gdXNlcnMuZmluZEluZGV4KHUgPT4gdS51c2VySWQgPT09IGRhdGEuaWQpO1xuICAgIHVzZXJzLnNwbGljZSh1c2VySW5kZXgsIDEsIGRhdGEpO1xuICAgIHRoaXMuc2F2ZUFsbFVzZXJzKHVzZXJzKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVVc2VyKGlkKSB7XG4gICAgY29uc3QgdXNlcnMgPSB0aGlzLmdldEFsbFVzZXJzKCk7XG4gICAgY29uc3QgdXNlckluZGV4ID0gdXNlcnMuZmluZEluZGV4KHUgPT4gdS51c2VySWQgPT09IGlkKTtcbiAgICB1c2Vycy5zcGxpY2UodXNlckluZGV4LCAxKTtcbiAgICB0aGlzLnNhdmVBbGxVc2Vycyh1c2Vycyk7XG4gIH1cblxuICBzdGF0aWMgc2F2ZUFsbFVzZXJzKHVzZXJMaXN0KSB7XG4gICAgd3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkodXNlckxpc3QsIG51bGwsIDIpKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgVXNlclJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cblVzZXJSb3V0ZXIuZ2V0KCcvdXNlci1saXN0JywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5qc29uKFVzZXIuZ2V0QWxsVXNlcnMoKSk7XG59KTtcblxuVXNlclJvdXRlci5nZXQoJy86Y291bnRyeUlkJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5qc29uKFVzZXIuZ2V0VXNlcihyZXEucGFyYW1zLmlkKSk7XG59KTtcblxuLy8gY3JlYXRlIHVzZXJcblVzZXJSb3V0ZXIucG9zdCgnLycsIChyZXEsIHJlcykgPT4ge1xuICByZXMuanNvbihVc2VyLmNyZWF0ZVVzZXIocmVxLmJvZHkpKTtcbn0pO1xuXG4vLyB1cGRhdGUgdXNlclxuVXNlclJvdXRlci5wb3N0KCcvOmNvdW50cnlJZCcsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBkYXRhID0gcmVxLmJvZHk7XG4gIGRhdGEuaWQgPSByZXEucGFyYW1zLmlkO1xuICByZXMuanNvbihVc2VyLnVwZGF0ZVVzZXIoZGF0YSkpO1xufSk7XG5cbi8vIGRlbGV0ZSB1c2VyXG5Vc2VyUm91dGVyLmRlbGV0ZSgnLzpjb3VudHJ5SWQnLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkO1xuICByZXMuanNvbihVc2VyLmRlbGV0ZVVzZXIoaWQpKTtcbn0pO1xuXG5cbiJdfQ==