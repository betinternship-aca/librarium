"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var fs_1 = require("fs");
var path_1 = require("path");
var _1 = require("./common/");
var filePath = path_1.join(__dirname, './data/users.db.json');
var User = (function () {
    function User(data) {
        this.userId = _1.createGUID();
        // copies every property of data to this
        Object.assign(this, data);
    }
    User.getAllUsers = function () {
        return JSON.parse(fs_1.readFileSync(filePath).toString());
    };
    User.getUser = function (userId) {
        return this.getAllUsers().find(function (u) { return u.userId === userId; });
    };
    User.createUser = function (data) {
        var user = new User(data);
        var users = this.getAllUsers();
        users.push(user);
        this.saveAllUsers(users);
        return user;
    };
    User.updateUser = function (data) {
        var users = this.getAllUsers();
        var userIndex = users.findIndex(function (u) { return u.userId === data.userId; });
        users.splice(userIndex, 1, data);
        this.saveAllUsers(users);
        return data;
    };
    User.deleteUser = function (userId) {
        var users = this.getAllUsers();
        var userIndex = users.findIndex(function (u) { return u.userId === userId; });
        users.splice(userIndex, 1);
        this.saveAllUsers(users);
    };
    User.saveAllUsers = function (userList) {
        fs_1.writeFileSync(filePath, JSON.stringify(userList, null, 2));
    };
    return User;
}());
exports.UserRouter = express.Router();
exports.UserRouter.get('/user-list', function (req, res) {
    res.json(User.getAllUsers());
});
exports.UserRouter.get('/:userId', function (req, res) {
    res.json(User.getUser(req.params.userId));
});
// create user
exports.UserRouter.post('/', function (req, res) {
    res.json(User.createUser(req.body));
});
// update user
exports.UserRouter.post('/:userId', function (req, res) {
    var data = req.body;
    data.id = req.params.userId;
    res.json(User.updateUser(data));
});
// delete user
exports.UserRouter.delete('/:userId', function (req, res) {
    var id = req.params.userId;
    res.json(User.deleteUser(id));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvaG9zcG9naC9EZXNrdG9wL2JldFByb2plY3RMaWJyYXJpdW0vbGlicmFyaXVtL3NyYy9zZXJ2ZXItYXBpL3VzZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL2hvc3BvZ2gvRGVza3RvcC9iZXRQcm9qZWN0TGlicmFyaXVtL2xpYnJhcml1bS9zcmMvc2VydmVyLWFwaS91c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQW1DO0FBQ25DLHlCQUErQztBQUMvQyw2QkFBMEI7QUFDMUIsOEJBQXFDO0FBRXJDLElBQU0sUUFBUSxHQUFHLFdBQUksQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUV6RDtJQVFFLGNBQVksSUFBSTtRQVBoQixXQUFNLEdBQVcsYUFBVSxFQUFFLENBQUM7UUFRNUIsd0NBQXdDO1FBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFHTSxnQkFBVyxHQUFsQjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sWUFBTyxHQUFkLFVBQWUsTUFBYztRQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFuQixDQUFtQixDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVNLGVBQVUsR0FBakIsVUFBa0IsSUFBSTtRQUNwQixJQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxDQUFD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WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHtyZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmN9IGZyb20gJ2ZzJztcbmltcG9ydCB7am9pbn0gZnJvbSAncGF0aCc7XG5pbXBvcnQge2NyZWF0ZUdVSUR9IGZyb20gJy4vY29tbW9uLyc7XG5cbmNvbnN0IGZpbGVQYXRoID0gam9pbihfX2Rpcm5hbWUsICcuL2RhdGEvdXNlcnMuZGIuanNvbicpO1xuXG5jbGFzcyBVc2VyIHtcbiAgdXNlcklkOiBzdHJpbmcgPSBjcmVhdGVHVUlEKCk7XG4gIGZpcnN0TmFtZTogc3RyaW5nO1xuICBsYXN0TmFtZTogc3RyaW5nO1xuICBnZW5kZXI6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgcGhvbmVOdW1iZXI/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIC8vIGNvcGllcyBldmVyeSBwcm9wZXJ0eSBvZiBkYXRhIHRvIHRoaXNcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGRhdGEpO1xuICB9XG5cblxuICBzdGF0aWMgZ2V0QWxsVXNlcnMoKTogVXNlcltdIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMoZmlsZVBhdGgpLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgc3RhdGljIGdldFVzZXIodXNlcklkOiBzdHJpbmcpOiBVc2VyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBbGxVc2VycygpLmZpbmQodSA9PiB1LnVzZXJJZCA9PT0gdXNlcklkKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVVc2VyKGRhdGEpIHtcbiAgICBjb25zdCB1c2VyID0gbmV3IFVzZXIoZGF0YSk7XG4gICAgY29uc3QgdXNlcnMgPSB0aGlzLmdldEFsbFVzZXJzKCk7XG4gICAgdXNlcnMucHVzaCh1c2VyKTtcbiAgICB0aGlzLnNhdmVBbGxVc2Vycyh1c2Vycyk7XG4gICAgcmV0dXJuIHVzZXI7XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlVXNlcihkYXRhOiBVc2VyKSB7XG4gICAgY29uc3QgdXNlcnMgPSB0aGlzLmdldEFsbFVzZXJzKCk7XG4gICAgY29uc3QgdXNlckluZGV4ID0gdXNlcnMuZmluZEluZGV4KHUgPT4gdS51c2VySWQgPT09IGRhdGEudXNlcklkKTtcbiAgICB1c2Vycy5zcGxpY2UodXNlckluZGV4LCAxLCBkYXRhKTtcbiAgICB0aGlzLnNhdmVBbGxVc2Vycyh1c2Vycyk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBzdGF0aWMgZGVsZXRlVXNlcih1c2VySWQpIHtcbiAgICBjb25zdCB1c2VycyA9IHRoaXMuZ2V0QWxsVXNlcnMoKTtcbiAgICBjb25zdCB1c2VySW5kZXggPSB1c2Vycy5maW5kSW5kZXgodSA9PiB1LnVzZXJJZCA9PT0gdXNlcklkKTtcbiAgICB1c2Vycy5zcGxpY2UodXNlckluZGV4LCAxKTtcbiAgICB0aGlzLnNhdmVBbGxVc2Vycyh1c2Vycyk7XG4gIH1cblxuICBzdGF0aWMgc2F2ZUFsbFVzZXJzKHVzZXJMaXN0KSB7XG4gICAgd3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkodXNlckxpc3QsIG51bGwsIDIpKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgVXNlclJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cblVzZXJSb3V0ZXIuZ2V0KCcvdXNlci1saXN0JywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5qc29uKFVzZXIuZ2V0QWxsVXNlcnMoKSk7XG59KTtcblxuVXNlclJvdXRlci5nZXQoJy86dXNlcklkJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5qc29uKFVzZXIuZ2V0VXNlcihyZXEucGFyYW1zLnVzZXJJZCkpO1xufSk7XG5cbi8vIGNyZWF0ZSB1c2VyXG5Vc2VyUm91dGVyLnBvc3QoJy8nLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oVXNlci5jcmVhdGVVc2VyKHJlcS5ib2R5KSk7XG59KTtcblxuLy8gdXBkYXRlIHVzZXJcblVzZXJSb3V0ZXIucG9zdCgnLzp1c2VySWQnLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgZGF0YSA9IHJlcS5ib2R5O1xuICBkYXRhLmlkID0gcmVxLnBhcmFtcy51c2VySWQ7XG4gIHJlcy5qc29uKFVzZXIudXBkYXRlVXNlcihkYXRhKSk7XG59KTtcblxuLy8gZGVsZXRlIHVzZXJcblVzZXJSb3V0ZXIuZGVsZXRlKCcvOnVzZXJJZCcsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBpZCA9IHJlcS5wYXJhbXMudXNlcklkO1xuICByZXMuanNvbihVc2VyLmRlbGV0ZVVzZXIoaWQpKTtcbn0pO1xuXG5cbiJdfQ==