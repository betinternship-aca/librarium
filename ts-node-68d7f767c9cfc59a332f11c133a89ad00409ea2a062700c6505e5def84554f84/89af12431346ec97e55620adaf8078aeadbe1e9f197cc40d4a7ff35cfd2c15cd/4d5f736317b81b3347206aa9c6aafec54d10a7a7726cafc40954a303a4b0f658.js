"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var fs_1 = require("fs");
var path_1 = require("path");
var _1 = require("./common/");
var filePath = path_1.join(__dirname, './data/users.db.json');
var User = (function () {
    function User(data) {
        this.id = _1.createGUID();
        // copies every property of data to this
        Object.assign(this, data);
    }
    User.getAllUsers = function () {
        return JSON.parse(fs_1.readFileSync(filePath).toString());
    };
    User.getUser = function (id) {
        return this.getAllUsers().find(function (u) { return u.id === id; });
    };
    User.createUser = function (data) {
        var user = new User(data);
        var users = this.getAllUsers();
        users.push(user);
        this.saveAllUsers(users);
        return user;
    };
    User.updateUser = function (data) {
        var users = this.getAllUsers();
        var userIndex = users.findIndex(function (u) { return u.id === data.id; });
        users.splice(userIndex, 1, data);
        this.saveAllUsers(users);
        return data;
    };
    User.deleteUser = function (id) {
        var users = this.getAllUsers();
        var userIndex = users.findIndex(function (u) { return u.id === id; });
        users.splice(userIndex, 1);
        this.saveAllUsers(users);
    };
    User.saveAllUsers = function (userList) {
        fs_1.writeFileSync(filePath, JSON.stringify(userList, null, 2));
    };
    return User;
}());
exports.User = User;
exports.UserRouter = express.Router();
exports.UserRouter.get('/user-list', function (req, res) {
    res.json(User.getAllUsers());
});
exports.UserRouter.get('/:id', function (req, res) {
    res.json(User.getUser(req.params.id));
});
// create user
exports.UserRouter.post('/', function (req, res) {
    res.json(User.createUser(req.body));
});
// update user
exports.UserRouter.post('/:id', function (req, res) {
    var data = req.body;
    data.id = req.params.id;
    res.json(User.updateUser(data));
});
// delete user
exports.UserRouter.delete('/:id', function (req, res) {
    var id = req.params.id;
    res.json(User.deleteUser(id));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvaG9zcG9naC9EZXNrdG9wL2JldFByb2plY3RMaWJyYXJpdW0vbGlicmFyaXVtL3NyYy9zZXJ2ZXItYXBpL3VzZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL2hvc3BvZ2gvRGVza3RvcC9iZXRQcm9qZWN0TGlicmFyaXVtL2xpYnJhcml1bS9zcmMvc2VydmVyLWFwaS91c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQW1DO0FBQ25DLHlCQUErQztBQUMvQyw2QkFBMEI7QUFDMUIsOEJBQXFDO0FBRXJDLElBQU0sUUFBUSxHQUFHLFdBQUksQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUV6RDtJQVFFLGNBQVksSUFBSTtRQVBoQixPQUFFLEdBQVcsYUFBVSxFQUFFLENBQUM7UUFReEIsd0NBQXdDO1FBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxnQkFBVyxHQUFsQjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sWUFBTyxHQUFkLFVBQWUsRUFBVTtRQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFYLENBQVcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxlQUFVLEdBQWpCLFVBQWtCLElBQUk7UUFDcEIsSUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxL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Q29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHtyZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmN9IGZyb20gJ2ZzJztcbmltcG9ydCB7am9pbn0gZnJvbSAncGF0aCc7XG5pbXBvcnQge2NyZWF0ZUdVSUR9IGZyb20gJy4vY29tbW9uLyc7XG5cbmNvbnN0IGZpbGVQYXRoID0gam9pbihfX2Rpcm5hbWUsICcuL2RhdGEvdXNlcnMuZGIuanNvbicpO1xuXG5leHBvcnQgY2xhc3MgVXNlciB7XG4gIGlkOiBzdHJpbmcgPSBjcmVhdGVHVUlEKCk7XG4gIGZpcnN0TmFtZTogc3RyaW5nO1xuICBsYXN0TmFtZTogc3RyaW5nO1xuICBnZW5kZXI6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgcGhvbmVOdW1iZXI/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIC8vIGNvcGllcyBldmVyeSBwcm9wZXJ0eSBvZiBkYXRhIHRvIHRoaXNcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGRhdGEpO1xuICB9XG5cbiAgc3RhdGljIGdldEFsbFVzZXJzKCk6IFVzZXJbXSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKGZpbGVQYXRoKS50b1N0cmluZygpKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRVc2VyKGlkOiBzdHJpbmcpOiBVc2VyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBbGxVc2VycygpLmZpbmQodSA9PiB1LmlkID09PSBpZCk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlVXNlcihkYXRhKSB7XG4gICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKGRhdGEpO1xuICAgIGNvbnN0IHVzZXJzID0gdGhpcy5nZXRBbGxVc2VycygpO1xuICAgIHVzZXJzLnB1c2godXNlcik7XG4gICAgdGhpcy5zYXZlQWxsVXNlcnModXNlcnMpO1xuICAgIHJldHVybiB1c2VyO1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZVVzZXIoZGF0YSkge1xuICAgIGNvbnN0IHVzZXJzID0gdGhpcy5nZXRBbGxVc2VycygpO1xuICAgIGNvbnN0IHVzZXJJbmRleCA9IHVzZXJzLmZpbmRJbmRleCh1ID0+IHUuaWQgPT09IGRhdGEuaWQpO1xuICAgIHVzZXJzLnNwbGljZSh1c2VySW5kZXgsIDEsIGRhdGEpO1xuICAgIHRoaXMuc2F2ZUFsbFVzZXJzKHVzZXJzKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVVc2VyKGlkKSB7XG4gICAgY29uc3QgdXNlcnMgPSB0aGlzLmdldEFsbFVzZXJzKCk7XG4gICAgY29uc3QgdXNlckluZGV4ID0gdXNlcnMuZmluZEluZGV4KHUgPT4gdS5pZCA9PT0gaWQpO1xuICAgIHVzZXJzLnNwbGljZSh1c2VySW5kZXgsIDEpO1xuICAgIHRoaXMuc2F2ZUFsbFVzZXJzKHVzZXJzKTtcbiAgfVxuXG4gIHN0YXRpYyBzYXZlQWxsVXNlcnModXNlckxpc3QpIHtcbiAgICB3cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBKU09OLnN0cmluZ2lmeSh1c2VyTGlzdCwgbnVsbCwgMikpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBVc2VyUm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuVXNlclJvdXRlci5nZXQoJy91c2VyLWxpc3QnLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oVXNlci5nZXRBbGxVc2VycygpKTtcbn0pO1xuXG5Vc2VyUm91dGVyLmdldCgnLzppZCcsIChyZXEsIHJlcykgPT4ge1xuICByZXMuanNvbihVc2VyLmdldFVzZXIocmVxLnBhcmFtcy5pZCkpO1xufSk7XG5cbi8vIGNyZWF0ZSB1c2VyXG5Vc2VyUm91dGVyLnBvc3QoJy8nLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oVXNlci5jcmVhdGVVc2VyKHJlcS5ib2R5KSk7XG59KTtcblxuLy8gdXBkYXRlIHVzZXJcblVzZXJSb3V0ZXIucG9zdCgnLzppZCcsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBkYXRhID0gcmVxLmJvZHk7XG4gIGRhdGEuaWQgPSByZXEucGFyYW1zLmlkO1xuICByZXMuanNvbihVc2VyLnVwZGF0ZVVzZXIoZGF0YSkpO1xufSk7XG5cbi8vIGRlbGV0ZSB1c2VyXG5Vc2VyUm91dGVyLmRlbGV0ZSgnLzppZCcsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBpZCA9IHJlcS5wYXJhbXMuaWQ7XG4gIHJlcy5qc29uKFVzZXIuZGVsZXRlVXNlcihpZCkpO1xufSk7XG5cblxuIl19